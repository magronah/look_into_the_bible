---
title: "Hands-on building an `R` package"
format: 
  revealjs:
    slide-number: true
    slide-level: 4
    embed-resources: true
---

## Before proceeding...

<br>

> **Attribution:** This content has been developed on the basis provided by [**Chapter 1: The Whole Game**](https://r-pkgs.org/release.html) (`R` packages book by Hadley Wickham & Jenny Bryan, 2e) and the UBC course notes [**Reproducible and Trustworthy Workflows for Data Science**](https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/materials/lectures/10-packaging-and-documenting.html#when-to-start-writing-an-r-or-python-package) by Tiffany Timbers, Joel Östblom, Florencia D’Andrea, and Rodolfo Lourenzutti

> We assume you have followed the installation instructions we shared before the workshop and have: <span style="color: purple;">registered for a GitHub account</span>  and <span style="color: purple;">installed git</span> ([**more information here**](https://github.com/UBC-STAT/ssc-workshop-2024#ssc-workshop-2024))


## Toy package: <span style="color: darkblue;">{eda}</span>

::: incremental
- Suppose our package's purpose is to provide data wrangling and summary functions to conduct a proper <span style="color: purple;">exploratory data analysis</span> (hence the name <span style="color: purple;">EDA</span>)
- Therefore, our toy package's name will be <span style="color: darkblue;">{eda}</span>
- We will be switching back and forth between these slides and hands-on practice in <span style="color: purple;">**RStudio**</span>
:::

![](img/r-rstudio.png){fig-align="center" width=10%}

## Installing auxiliary `R` packages

::: incremental
- Before starting with the actual process, we assumed you have installed the necessary packages <span style="color: darkblue;">{devtools}</span> and <span style="color: darkblue;">{usethis}</span> (also sent in the installation instructions before the workshop) 
- <span style="color: darkblue;">{devtools}</span> is a meta-package that encompasses more focused development-related `R` packages
- <span style="color: darkblue;">{usethis}</span> automates tasks related to <span style="color: purple;">project setup</span> and <span style="color: purple;">development</span> to build `R` packages
:::

![](img/usethis-devtools.png){fig-align="center" width=20%}

### Installation and loading code

- Installing <span style="color: darkblue;">{devtools}</span> automatically installs <span style="color: darkblue;">{usethis}</span>
- Same situation applies when it come to loading the packages

```{r}
#| echo: true
#| eval: false
# Uncomment and run the line below in the R console if you have not yet installed the `devtools` package
# install.packages("devtools") 

library(devtools)
```

## `create_package()`

::: incremental
- `create_package()` will <span style="color: purple;">initialize</span> our new package in a directory of our choice 
- I will initialize the <span style="color: darkblue;">{eda}</span> package in my `Desktop` folder for easier reference
:::

. . .

::: callout-warning
## Don'ts when choosing your home directory

-   Your package shouldn't be hosted in another RStudio Project, `R` package, or Git repository
-   Your package shouldn't be hosted in an `R` package library (i.e., where we usually install other packages from CRAN)
:::

### Code

```{r}
#| echo: true
#| eval: false
create_package("~/Desktop/eda")
```

<br>

![](img/create_package.png){fig-align="center" width=8%}

### Project layout description (`ignore`-type files)

::: incremental
- `.gitignore` is used by GitHub and lists all <span style="color: purple;">"hidden"</span> files created by `R` and RStudio that aren't necessary for the repository
-  `.Rbuildignore` contains all files created via `R` and RStudio <span style="color: purple;">that won't be necessary</span> when building our package (e.g., `eda.Rproj`)
:::

### Project layout description (other components)

::: incremental
- `DESCRIPTION` contains the metadata and dependency installation instructions for our package
- `eda.Rproj` is the <span style="color: purple;">RStudio project file</span>
- `NAMESPACE` contains the package's functions to export along with imports from other packages
- An `R/` directory which will contain <span style="color: purple;">all package's functions</span> as `.R` scripts
:::

## `use_git()`

::: incremental
- Besides creating the <span style="color: purple;">RStudio project file</span> `eda.Rproj`, we will initialize a Git repository via `use_git()`
- A Git repository will eventually allow us to publish and share our package in [**GitHub.com**](https://github.com)
:::

. . .

```{r}
#| echo: true
#| eval: false

library(devtools)

use_git()
```

### What does this function specifically do?

- It creates a hidden <span style="color: purple;">`.git` directory</span> in the folder <span style="color: darkblue;">{eda}</span>
- Furthermore, it creates your <span style="color: purple;">initial commit</span>

![](img/use_git.png){fig-align="center" width=8%}

### Ensuring we made our initial commit

- Let's relaunch our RStudio project `eda.Rproj`
- On the <span style="color: purple;">`Git` tab</span>, click on the clock icon to check your <span style="color: purple;">commit history</span> (note your GitHub user is shown in the `Author` column)

![](img/git-history.png){fig-align="center" width=8%}

## Write your first function!

. . .

- Recall we aim to package our code (shown below) for counting the number of observations in a class for any data frame (besides `mtcars`) so we (and others) can reuse this code more easily in other projects

```{r}
#| echo: true
#| 

library(tidyverse)

mtcars |>
  group_by(cyl) |>
  summarize(count = n()) |>
  rename("class" = cyl)
```

### This is our function `count_classes()`

. . .

- It receives a `data_frame` or data frame extension (e.g., a tibble) along with an <span style="color: purple;">unquoted column name</span> containing the class label `class_col`

```{r}
#| echo: true
#| eval: false

library(dplyr)

count_classes <- function(data_frame, class_col) {
  if (!is.data.frame(data_frame)) {
    stop("`data_frame` should be a data frame or data frame extension (e.g. a tibble)")
  }

  data_frame |>
    group_by({{ class_col }}) |>
    summarize(count = n()) |>
    rename("class" = {{ class_col }})
}
```

### The use of ``{{ }}``

::: incremental
- Note we're using <span style="color: purple;">curly brackets</span> in `{{ class_col }}`
- An indirection with unquoted column names (such as `class_col`) needs <span style="color: purple;">extra support</span> (via the curly brackets) because the global environment is not aware of the data frame column names
:::

### Syntax `package::function()`

- `count_classes()` includes four <span style="color: darkblue;">{dplyr}</span> functions: 
    - `group_by()`, `summarize()`, `n()`, and `rename()`
- Alternatively, we can use the syntax `dplyr::group_by()`, `dplyr::summarize()`, `dplyr::n()`, and `dplyr::rename()`
- This syntax is recommended since it makes explicit which package each dependency is coming from within our package functions

### Re-writing our function

```{r}
#| echo: true
#| eval: false

count_classes <- function(data_frame, class_col) {
  if (!is.data.frame(data_frame)) {
    stop("`data_frame` should be a data frame or data frame extension (e.g. a tibble)")
  }

  data_frame |>
    dplyr::group_by({{ class_col }}) |>
    dplyr::summarize(count = dplyr::n()) |>
    dplyr::rename("class" = {{ class_col }})
}
```

### `use_r()`

<br>

```{r}
#| echo: true
#| eval: false

library(devtools)

use_r("count_classes")
```

<br>

. . .

- This helper function from <span style="color: darkblue;">{usethis}</span> allows us to create an `.R` script in the `R/` subdirectory of <span style="color: darkblue;">{eda}</span>

![](img/console-use_r.png){fig-align="center"}

### How does it look on R Studio?

. . .

- `use_r()` creates the `.R` script `count_classes.R`
- The `Git` tab keeps track of all our changes in the repository <span style="color: purple;">after our initial commit</span>

![](img/count_classes.png){fig-align="center"}

### Local commit of changes

. . .

- Now, we need to commit our work in `count_classes.R`
- We can do this via RStudio:
  1. In the `Git` tab, check the box in column `Staged`
  2. Click on the `Commit` button

![](img/commit-count_classes.png){fig-align="center" width=70%}

### Then...

. . .

1. Ensure the changes are checked in the `Stage` column
2. Type a commit message: `Add count_classes()`
3. Click on the `Commit` button

![](img/commit-count_classes-2.png){fig-align="center" width=60%}

### Commit confirmation

- We will get the below message once we have locally committed our changes

![](img/commit-count_classes-3.png){fig-align="center" width=60%}

. . .

- This local committing process will be <span style="color: purple;">repeated every time</span> we make significant changes to our package

## `load_all()`

- The next step in our package building process is <span style="color: purple;">to test **informally**</span> our function `count_classes()`
- Function `load_all()` from <span style="color: darkblue;">{devtools}</span> makes function `count_classes()` available for experimentation

```{r}
#| echo: true
#| eval: false

load_all()
```

<br>

![](img/load_all-function.png){fig-align="center"}

### Then, we test our function

- We use data frame `mtcars` and column `cyl`
- The above variables correspond to function arguments `data_frame` and `class_col`, respectively

```{r}
#| echo: true
#| eval: false

count_classes(data_frame = mtcars, class_col = cyl)
```

![](img/using-count-classes.png){fig-align="center"}

## Setting up our remote GitHub repository

- Via our <span style="color: purple;">GitHub account</span>, we will create a remote <span style="color: darkblue;">{eda}</span> **public** repository (**we will add the `README.md` file later**)

![](img/create-new-repo-GH.png){fig-align="center" width=60%}

### Pushing our local commits to the remote repository

. . .

- <span style="color: purple;">In the `Terminal` tab of our RStudio session</span>, we will paste the Git commands shown by <span style="color: purple;">GitHub.com</span> from section `...or push an existing repository from the command line`

![](img/push-existing-repo.png){fig-align="center" width=50%}

### This is how our remote repository should look like:

<br>

![](img/initial-eda-repo.png){fig-align="center" width=60%}

### And these are our two initial commits in the remote repository:

<br>

![](img/initial-commits-eda-repo.png){fig-align="center" width=60%}

## `check()`

- It's a function that ensures the sources of an `R` add-on package work correctly
- Therefore, `check()` executes `R CMD check` in the shell (i.e., terminal)
- We use `check()` from <span style="color: darkblue;">{devtools}</span> via the `R` `Console`

```{r}
#| echo: true
#| eval: false

check()
```

![](img/using-check.png){fig-align="center"}

### Heads-up!

::: incremental
- The output of this function is quite long!
- That said, we essentially need to check the <span style="color: purple;">final summary</span> (i.e., the previous screenshot)
- It's crucial to address any issue we might encounter (which will be shown in the `check()` output)
- For our toy package <span style="color: darkblue;">{eda}</span>, we will only encounter two warnings (**package dependency** and **missing license**, to be addressed later on) 
:::

## Edit `DESCRIPTION`

. . .

- It's time to edit our package's <span style="color: purple;">metadata</span> in the `DESCRIPTION` file
- It currently looks like this:

```
Package: eda
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R: 
    person("First", "Last", , "first.last@example.com", role = c("aut", "cre"),
           comment = c(ORCID = "YOUR-ORCID-ID"))
Description: What the package does (one paragraph).
License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a
    license
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.1
```

### Heads-up!

- The previous `DESCRIPTION` template might look different if you followed the instructions in system setup from here: <https://r-pkgs.org/setup.html#personal-startup-configuration>

### Let's proceed with the edits!

- We will update the fields `Title`, `Authors@R`, and `Description`
- If you don't have an `ORCID`, you can delete `comment = c(ORCID = "YOUR-ORCID-ID")`

```
Package: eda
Title: A Package for Data Wrangling
Version: 0.0.0.9000
Authors@R: 
    person("G. Alexi", "Rodriguez-Arelis", , "alexrod@stat.ubc.ca", role = c("aut", "cre"))
Description: Provide data wrangling and summary functions to conduct a proper 
    exploratory data analysis.
License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a
    license
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.1
```

### Saving, committing, and pushing

- Once we have edited the `DESCRIPTION` file, we need to save our changes
- Then, as we did with the `count_classes()` function, <span style="color: purple;">let's locally commit these changes</span> (use the commit message `Edit DESCRIPTION`)
- Moving forward, within the `Git` tab in RStudio, we will remotely push our edits to our public repository on GitHub by clicking on the `Push` button

![](img/push-button.png){fig-align="center"}

### Ensuring we have remotely pushed our edits

- Firstly, within RStudio, you will get the below confirmation

![](img/push-confirmation.png){fig-align="center" width=50%}

- Then, we will be able to see our third commit in our remote repository

![](img/third-commit-eda-repo.png){fig-align="center" width=70%}

## `use_mit_license()`

- To address one of the warnings obtained in the output of `check()`, we need to include a `LICENSE.md`
- Hence, we can use function `use_mit_license()` from <span style="color: darkblue;">{usethis}</span> via the `R` `Console`

```{r}
#| echo: true
#| eval: false

use_mit_license()
```

![](img/using-use_mit_license.png){fig-align="center"}

### How does `LICENSE.md` look like?

![](img/license-md.png){fig-align="center" width=80%}

> **Note:** More about license matters later on in this workshop

### Let's take a look at the `DESCRIPTION` file!

- The `License` field gets updated as follows:

```
Package: eda
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R: 
    person("G. Alexi", "Rodriguez-Arelis", , "alexrod@stat.ubc.ca", role = c("aut", "cre"))
Description: Provide data wrangling and summary functions to conduct a proper 
    exploratory data analysis.
License: MIT + file LICENSE
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.1
```

. . .

- <span style="color: purple;">Let's commit and push these changes to the remote repository</span> (use the commit message `Use MIT license`)

## `document()`

- Let's document our `count_classes()` function via package <span style="color: darkblue;">{roxygen2}</span>

![](img/roxygen2.png){fig-align="center"}

- In RStudio, let's open `R/count_classes.R` in the source editor

### Using {roxygen2}

- Do `Code > Insert roxygen skeleton`
- We will get a <span style="color: purple;">documentation template</span> we have to fill out

![](img/roxygen-skeleton.png){fig-align="center" width=80%}

### Filling out the template

- Let's copy and paste the below documentation on the previous template for `count_classes()`

```
#' Count class observations
#' Creates a new data frame with two columns, 
#' listing the classes present in the input data frame,
#' and the number of observations for each class.
#'
#' @param data_frame A data frame or data frame extension (e.g. a tibble).
#' @param class_col Unquoted column name of column containing class labels.
#'
#' @return A data frame with two columns. 
#'   The first column (named class) lists the classes from the input data frame.
#'   The second column (named count) lists the number of observations for each class from the input data frame.
#'   It will have one row for each class present in input data frame.
#' @export
#'
#' @examples
#' count_classes(mtcars, cyl)
```
. . .

### Then...

- Save your changes in `R/count_classes.R`
- Commit and push these changes to the remote repository</span> (use the commit message `Add roxygen header to document count_classes()`)

### Using `document()` from <span style="color: darkblue;">{devtools}</span>

- Let's run the `document()` function in the `R` `Console`

```{r}
#| echo: true
#| eval: false

document()
```

<br>

- This function creates `man/count_classes.Rd` in <span style="color: darkblue;">{eda}</span>, which is the help we get when typing `?count_classes` in the `R` `Console`

### Viewing the outputs from `document()`

![](img/doc-count_classes.png){fig-align="center" width=80%}

. . .

- Commit and push these changes to the remote repository</span> (use the commit message `Run document()`)

## Using `check()` again

- Since we already included `LICENSE.md` in <span style="color: darkblue;">{eda}</span>, let's use `check()` again in the `R` `Console` to ensure the license-related warning is gone

![](img/using-check-2.png){fig-align="center"}

## `install()`

- It's time to install our package <span style="color: darkblue;">{eda}</span>
- That said, instead of using `install.packages()` as with any package in the CRAN, we will use `install()` from <span style="color: darkblue;">{devtools}</span>
- Note that `install()` installs a local package in the current working directory, whereas `install.packages()` installs from a package repository

```{r}
#| echo: true
#| eval: false

install()
library(eda)
count_classes(mtcars, cyl)
```

### Let's do it in the `R` console

![](img/using-install.png){fig-align="center"}

## `use_package()`

- Note that `count_classes()` uses functions from package <span style="color: darkblue;">{dplyr}</span>

![](img/count_classes-2.png){fig-align="center"}

- Therefore, <span style="color: darkblue;">{dplyr}</span> becomes a dependency

### How to include a dependency in our package?

- We can use function `use_package()` from <span style="color: darkblue;">{usethis}</span>

```{r}
#| echo: true
#| eval: false

use_package("dplyr")
```

<br>

- This function will include <span style="color: darkblue;">{dplyr}</span> in our `DESCRIPTION`, more specifically in `Imports`

### Let's do it in the `R` console

![](img/use-use_package.png){fig-align="center"}

- Commit and push these changes to the remote repository</span> (use the commit message `Import dplyr`)

## `use_readme_rmd()`

- Our remote repository still doesn't have a `README.md` file <span style="color: purple;">describing the package, installation, and usage</span>
- We can automatically generate one via `use_readme_rmd()` from <span style="color: darkblue;">{usethis}</span>

```{r}
#| echo: true
#| eval: false

use_readme_rmd()
```

<br>

. . .

- This function will generate an `.Rmd` template, which we have to fill out

### The `.Rmd` file

![](img/use-use_readme_rmd.png){fig-align="center"}

- Fill out the template, knit to `.md`, use `build_readme()`, commit, and push these changes to the remote repository</span> (use the commit message `Write README.Rmd and render`)

## Using `check()` and `install()`

- We're done with the basic steps to build our `R` package!
- Again, we use `check()` (to ensure all warnings are gone!), and then re-build via `install()`

## Review

- We can partially review the previous process (`test()` will be covered later on) via the below diagram from [**Chapter 1: The Whole Game**](https://r-pkgs.org/release.html) (`R` packages book by Hadley Wickham & Jenny Bryan, 2e)

![](https://r-pkgs.org/diagrams/workflow.png){fig-align="center"}
